{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../NewGameModal.svelte",
    "../../card.svelte",
    "../../footer.svelte",
    "../../gamecell.svelte",
    "../../tableau.svelte"
  ],
  "sourcesContent": [
    "<script>\t\n  import interact from 'interactjs';\n  import { onMount } from 'svelte';\n  /* partials */\n  import GameCell from './gamecell.svelte';\n  import Tableau from './tableau.svelte';\n  import Footer from './footer.svelte';\n  import NewGameModal from './NewGameModal.svelte';\n  import {timeToString} from './time_to_string.js';\n  import {columns, history, moves, settings, timeElapsed, started} from './stores.js'; /* data store */\n  \n  const Game = {\n    HOMECELL_OFFSET: 8,\n    FREECELL_OFFSET: 12,\n    PLAYING_CARDS: [\n    \"Ac\", \"Ad\", \"Ah\", \"As\", \n    \"2c\", \"2d\", \"2h\", \"2s\", \n    \"3c\", \"3d\", \"3h\", \"3s\", \n    \"4c\", \"4d\", \"4h\", \"4s\", \n    \"5c\", \"5d\", \"5h\", \"5s\", \n    \"6c\", \"6d\", \"6h\", \"6s\", \n    \"7c\", \"7d\", \"7h\", \"7s\", \n    \"8c\", \"8d\", \"8h\", \"8s\", \n    \"9c\", \"9d\", \"9h\", \"9s\", \n    \"Tc\", \"Td\", \"Th\", \"Ts\", \n    \"Jc\", \"Jd\", \"Jh\", \"Js\", \n    \"Qc\", \"Qd\", \"Qh\", \"Qs\", \n    \"Kc\", \"Kd\", \"Kh\", \"Ks\" \n    ],\n    RANKS: ['A','2','3','4','5','6','7','8','9','T','J','Q','K'],\n    cardRank(card) { return card[0] },\n    cardSuit(card) { return card[1] },\n    cardColor(card) { \n      return (card[1] == 'c' || card[1] == 's') ? 'black' : 'red'; \n    },\n    cardVal(card) { \n      return this.RANKS.indexOf(card[0]);\n    },\n    removeCard(list, card) { \n      return list.filter(item => item !== card);\n    },\n    addCard(list, card) { \n      return list.concat(card); \n    },\n    moveCard(fromIndex, toIndex, card, record = true) {\n      $columns[fromIndex] = this.removeCard($columns[fromIndex], card);\n      $columns[toIndex]   = this.addCard($columns[toIndex], card);\n      if (record) {\n        this.recordMove(fromIndex, toIndex, card);\n      }\n      $moves = $moves + 1;\n    },\n\n    // returns true if move from one column to other is valid.\n    // if toIndex is homecell -> homecell logic\n    // if toIndex is freecell -> only if free and single card\n    // if toIndex is tableaux -> only if first card of cards is alternate and last card is 1+ than card\n    validTableauMove(fromIndex, toIndex, cards) {\n      console.log(\"tableau logic\");      \n      if (fromIndex === toIndex) { \n        console.log(\"Can't move to same column.\"); \n        return; \n      }\n\n      // only allow if # of empty freecells >= selected count\n      let free_moves = Game.numEmptyFreeCells();\n      if (cards.length - 1 > free_moves) {\n        console.log(`Not enough empty freecells: Need ${cards.length-1} spaces, only have ${free_moves}`);\n        return;\n      }\n\n      // ok if parent is blank\n      if ($columns[toIndex].length === 0) {\n        return true;\n      }\n\n      // check parent vs first card in cards\n      let card = cards[0];\n      let parent = $columns[toIndex].slice(-1).pop();\n      if (Game.alternateColors(parent, card) && Game.descendingRank(parent, card)) {\n        return true;\n      }\n    },\n\n    validCellMove(fromIndex, toIndex, cards) {\n      if (cards.length > 1) { return; }\n\n      if (toIndex < Game.FREECELL_OFFSET) {\n        // HomeCell        \n        let card = cards[0];\n        // if empty, only an A\n        if ($columns[toIndex].length === 0) {\n          return Game.cardRank(card) === 'A';\n        }\n\n        // if not empty, only if card is same suit and +1 to last card in stack\n        let parent = $columns[toIndex].slice(-1).pop();\n        if ((Game.cardSuit(parent) === Game.cardSuit(card)) && \n            (Game.ascendingRank(parent, card))) {\n          return true;\n        }\n      } else {\n        // FreeCell\n        return ($columns[toIndex].length === 0); \n      }\n    },\n\n    // move cards if last card in toIndex is alternate color, +1 to first card in cards\n    moveCards(fromIndex, toIndex, cards, record = true) {\n      cards.forEach(card => {\n        $columns[fromIndex] = this.removeCard($columns[fromIndex], card);\n        $columns[toIndex]   = this.addCard($columns[toIndex], card);\n      });\n      if (record) { this.recordMove(fromIndex, toIndex, cards); }\n      // check if move caused game to end (win)\n      if (Game.won()) {\n        setTimeout(() => {\n          alert(`You won!`);\n        }, 1000);\n      }\n    },\n\n    alternateColors(c1, c2) { \n      return (this.cardColor(c1) !== this.cardColor(c2));\n    },\n    descendingRank(c1, c2) { \n      return (this.cardVal(c1) === this.cardVal(c2) + 1);\n    },\n    ascendingRank(c1, c2) { \n      return this.descendingRank(c2, c1); \n    },\n    validParent(parent, child) {\n      return (this.descendingRank(parent, child)) && \n             (this.alternateColors(parent, child));\n    },\n    findEmptyHomeCell() {\n      return this.findEmptyCell(this.HOMECELL_OFFSET);\n    },\n    findEmptyFreeCell() {\n      return this.findEmptyCell(this.FREECELL_OFFSET);\n    },\n    findEmptyCell(offset) {\n      for (let i=offset; i < (4+offset); i++) {\n        if ($columns[i].length == 0) return i;\n      }\n    },\n    numEmptyFreeCells() {\n      let freecells = $columns.slice(this.FREECELL_OFFSET);\n      return freecells.filter(c => { return (c.length === 0); }).length;\n    },\n    findValidHomeCell(card) {\n      for (let i=this.HOMECELL_OFFSET; i < (this.HOMECELL_OFFSET + 4); i++) {\n        let last_card = $columns[i].slice(-1).pop();\n        if (last_card) {\n          if ((Game.cardSuit(card) === Game.cardSuit(last_card)) && \n              (Game.ascendingRank(last_card, card))) {\n            return i;\n          }\n        }\n      }\n    },\n    findValidParent(card, index) {\n      for (let i=0; i < 8; i++) {\n        if (i === index) continue;\n        let parent = [...$columns[i]].slice(-1).pop();\n        console.log(`findValidParent in column ${i} for ${card}[${index}] parent:`, parent);\n        if (parent !== undefined) {\n          if (Game.validParent(parent, card)) return i;\n        }\n      }\n    },\n\n    // record moves made to be undone\n    // { from: 0..15, to: 0..15, cards: ['Ac', '6c' ]}\n    recordMove(fromIndex, toIndex, cards) {\n      let record = { from: fromIndex, to: toIndex, cards: cards }\n      $history = [...$history, record];\n      $moves = $moves + 1;\n      console.log(`[move:${$history.length}]`,record);\n    },\n\n    undo() {\n      let record = $history.pop();\n      $history = $history;\n      if (!record) return;\n      console.log(\"Undo last move\", record);\n      Game.moveCards(record.to, record.from, record.cards, false);\n    },\n\n    won() {\n      for (let i=this.HOMECELL_OFFSET; i < (this.HOMECELL_OFFSET + 4); i++) {\n        if ($columns[i].length !== 13) { return false; }        \n      }\n      return true;\n    },\n\n    Deck: class {\n      // generates a new random deck based on unique game_id\n      constructor(seed) {\n        this.cards = [];\n        this.seed = parseInt(seed,10) || parseInt((Math.random() * 1000000), 10);\n        this.shuffle();\n      }\n\n      // MS random shuffle for FreeCell https://rosettacode.org/wiki/Deal_cards_for_FreeCell\n      shuffle() {\n        if (!this.empty) { return; }\n        let deck = Array.from(Game.PLAYING_CARDS, function(id) { return id });\n        let state = this.seed;\n        for (let len = 52; len >= 2; len--) {\n          state = ((214013 * state) + 2531011) & 0x7FFFFFFF;\n          let index = (state >> 16) % len;\n          let last = len - 1;\n          [deck[index], deck[last]] = [deck[last], deck[index]];\n        }\n        this.cards = deck.reverse();\n      }\n\n      toTableau() {\n        let tableaus = [ [],[],[],[], [],[],[],[] ];\n        let i = 0;\n        while (!this.empty) {\n          tableaus[i++ % tableaus.length].unshift(this.cards.pop());\n        }\n        return tableaus;\n      }\n\n      get empty() { return this.cards.length === 0; }\n    }\n  };\n\n  /* listeners for cards/cells */\n  onMount(() => {\n\n    //\n    // drop on Cell\n    //\n    interact('.cell').dropzone({\n      accept: '.draggable',\n      ondragenter: function(e) {\n        e.target.classList.add('drop-active');  \n      },\n      ondragleave: function(e) {\n        e.target.classList.remove('drop-active');\n      },\n      ondrop: function(e){\n        e.target.classList.remove('drop-active');\n        let card      = e.relatedTarget.id;\n        let fromIndex = e.relatedTarget.parentNode.dataset.index;\n        let toIndex   = e.target.dataset.index;\n        let cards     = selectCards(card, fromIndex);\n\n        if (Game.validCellMove(fromIndex, toIndex, cards)) {\n          Game.moveCards(fromIndex, toIndex, cards);\n        }\n      }\n    });\n\n    //\n    // drop on Tableau\n    //\n    interact('.tableau').dropzone({\n      accept: '.draggable',\n      listeners: {\n        drop (e) {\n          let card      = e.relatedTarget.id;\n          let fromIndex = e.relatedTarget.parentNode.dataset.index;\n          let toIndex   = e.target.dataset.index;\n          let cards     = selectCards(card, fromIndex);\n          console.log(`[Move] ${cards} from ${fromIndex} => ${toIndex}`);\n\n          if (Game.validTableauMove(fromIndex, toIndex, cards)) {\n            Game.moveCards(fromIndex, toIndex, cards);\n          }\n        } \n      }\n    });\n\n    //\n    // action on draggable card\n    //\n    interact('.draggable').draggable({     \n      onstart: function(event) {\n        let card  = event.target.id;\n        let index = event.target.parentNode.dataset.index;\n        let cards = selectCards(card, index);\n        cards.forEach(card => {\n          let el = document.getElementById(card);\n          el.style.zIndex = 10000;\n        });\n      },\n      onmove: function(event) {\n        let card  = event.target.id;\n        let index = event.target.parentNode.dataset.index;\n        let cards = selectCards(card, index);\n        cards.forEach(card => {\n          let el = document.getElementById(card);\n          let x = (parseFloat(el.getAttribute('data-x')) || 0) + event.dx;\n          let y = (parseFloat(el.getAttribute('data-y')) || 0) + event.dy;\n          el.style.transform = `translate(${x}px, ${y}px)`;\n          el.setAttribute('data-x',x);\n          el.setAttribute('data-y',y);\n        });\n      },        \n      onend: function(event) {\n        let card  = event.target.id;\n        let index = event.target.parentNode.dataset.index;\n        let cards = selectCards(card, index);\n        cards.forEach(card => {\n          let el = document.getElementById(card);          \n          el.removeAttribute(\"data-y\");\n          el.removeAttribute(\"data-x\");\n          el.removeAttribute(\"style\");\n          el.style.zIndex = undefined;\n        });\n      }      \n    });\n\n\n    // \n    // tap action on last card\n    //\n    interact('.draggable').on('tap', function(event){\n      let card  = event.target.id;\n      let index = event.target.parentNode.dataset.index;\n      let cards = selectCards(card, index);\n      if (cards.length > 1) return;\n\n      console.log(`Autocomplete action for ${card}`);\n\n      // move A to home\n      if (Game.cardRank(card) === 'A') {\n        let toIndex = Game.findEmptyHomeCell();\n        if (toIndex >= 0) {\n          console.log(\"moving card to empty homecell\")\n          Game.moveCards(index, toIndex, [card]);\n          return;\n        }\n      }\n\n      // find next viable spot - js is messed up 0 || undefined does not\n      // return what you expect.\n      let toIndex = Game.findValidHomeCell(card);\n      if (toIndex === undefined) {\n        toIndex = Game.findValidParent(card, index);\n      }\n      if (toIndex === undefined) {\n        toIndex = Game.findEmptyFreeCell();\n      }\n      if (toIndex >= 0) {\n        Game.moveCards(index, toIndex, [card]);\n      } else {\n        console.log(\"No valid move found\");\n      }  \n    });\n  });\n\n\t// app deals with handling game options, starting new game, etc.\n\t// Gameboard handles running the actual game\n\n  /* returns array of selected cards for dragging */\n  function selectCards(card, index) {\n    let cards = $columns[index];\n    let cardIndex = cards.indexOf(card);\n    if (cardIndex + 1 === cards.length) {\n      return [card];\n    } else {\n      return cards.slice(cardIndex);\n    }\n  };\n\n  function testWin() {\n    $columns = [\n      ['Ks'],[],[],[],[],[],[],[],\n      ['As','2s','3s','4s','5s','6s','7s','8s','9s','Ts','Js','Qs'],\n      ['Ad','2d','3d','4d','5d','6d','7d','8d','9d','Td','Jd','Qd','Kd'],\n      ['Ac','2c','3c','4c','5c','6c','7c','8c','9c','Tc','Jc','Qc','Kc'],\n      ['Ah','2h','3h','4h','5h','6h','7h','8h','9h','Th','Jh','Qh','Kh'],\n      [],[],[],[]\n    ];\n\n  };\n\n  function startGame(id) {\n    gameId = id || parseInt((Math.random() * 1000000), 10);\n    console.log(\"Start new game with id \", gameId);\n    let deck = new Game.Deck(gameId);\n    let cards = deck.toTableau();\n    $history = [];\n    $columns = cards.concat([[],[],[],[],[],[],[],[]]);\n    $moves = 0;\n    if (timer) { resetTimer(); } \n    timer = startTimer();\n    $started = true;\n  };\n\n  function startTimer() {\n    return setInterval(function() {\n      $timeElapsed += 1;\n    }, 1000);\n  };\n\n  function resetTimer() {\n    clearInterval(timer);\n    $timeElapsed = 0;\n  };\n\n  function getHint(){};\n\n  function setGameSettings() {};\n\n  let gameId;\n  $: showModal = true;\n  function handleAction(event) {\n    console.log(\"[action]\", event.detail);\n    let command = event.detail.command;\n    switch(command) {\n      case 'undo':\n        Game.undo();\n        break;\n      case 'settings':\n        console.log(\"change settings\");\n        break;\n      case 'newgame':\n        showModal = true;\n        break;\n      case 'startgame':\n        let id = event.detail.gameId;\n        startGame(id);          \n        showModal = false;\n        break;\n      case 'restart':\n        console.log(\"Restart same game\");\n        if (confirm(\"Are you sure you wish to restart this game?\")) {\n          startGame(gameId);\n          break;          \n        }\n      case 'hint':\n        console.log(\"Hint for next move\");\n        break;\n      case 'cancelmodal':\n        showModal = false;\n        break;\n      default:\n    }\n  };\n\n  /* init settings for new game */\n  let timer;\n</script>\n\n<nav class=\"navbar navbar-dark bg-dark m-0 p-1 header\">\n  <div class='navsection text-left'>\n    <a href='/' class='text-danger'><i class='fas fa-diamond'></i></a>&nbsp;\n  Game: {gameId || ' '}\n    <!-- <a on:click={testWin}>Test</a> -->\n  </div>\n  <div class='navsection text-center'>{timeToString($timeElapsed)}</div>\n  <div class='navsection text-right'>Moves: {$moves}</div>\n</nav>\n\n<div class='container board'>\n  <div class='row headboard'>    \n    <div class='cells-board homecells'>\n      {#each Array(4) as _, index}\n        <GameCell cards={$columns[index + Game.HOMECELL_OFFSET]} index={index + Game.HOMECELL_OFFSET}  type='homecell' draggable={false}/>\n      {/each}\n    </div>\n    <div class='cells-board freecells'>\n      {#each Array(4) as _, index}\n        <GameCell cards={$columns[index + Game.FREECELL_OFFSET]} index={index + Game.FREECELL_OFFSET}  type='freecell'/>\n      {/each}\n    </div>\n  </div>\n  <div class='row tableaus'>\n    {#each Array(8) as _, index}\n      <Tableau cards={$columns[index]} index={index} />\n    {/each}\n  </div>\n</div>\n\n<Footer disableUndo={($history.length === 0)} on:command={handleAction}/>\n\n<NewGameModal display={showModal} on:command={handleAction}/>\n\n<style type=\"text/scss\">@media (max-width: 300px) {\n  .board {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .header {\n    font-size: 1.5em;\n  }\n}\n@media (min-width: 1200px) {\n  .board {\n    width: 70vh;\n    height: 100vh;\n  }\n\n  .header {\n    font-size: 1.5em;\n  }\n}\n.header {\n  width: 100%;\n  height: 40px;\n  justify-content: space-between;\n}\n.header .navsection {\n  padding: 0 5px;\n  width: 33%;\n  flex-grow: 1;\n}\n\n.board {\n  height: 90%;\n  overflow: hidden;\n}\n\n.headboard {\n  padding: 0.2vh 0;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: center;\n}\n.headboard .cells-board {\n  display: flex;\n  flex-flow: row nowrap;\n  margin: 0.2vh 0;\n  padding: 0;\n  height: 100%;\n  width: 50%;\n}\n\n.homecells {\n  justify-content: flex-start;\n}\n\n.freecells {\n  justify-content: flex-end;\n}\n\n.tableaus {\n  height: 100%;\n  padding: 0.5vh 0;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: center;\n}\n\n/*# sourceMappingURL=App.svelte.css.map */</style>",
    "\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  import {started} from \"./stores.js\";\n  export let display = true;\n\n  let gameId;\n\n  const dispatch = createEventDispatcher();\n  function startGame() {\n    dispatch('command', {command: 'startgame', gameId: gameId});\n  };\n  function cancel() {\n    dispatch('command', {command: 'cancelmodal', gameId: gameId});\n  };\n</script>\n\n<div class='modal bg-dark {display ? \"d-block\" : \"\"}' id='new-game-modal'>\n  <div class='modal-dialog' style='top: 30%'>\n    <div class='modal-content alert alert-success'>\n      <a class='text-right' on:click={cancel} href='#'>X</a>\n      <div class='modal-header justify-content-center'>\n        <div>\n          <h3>FreeCell</h3>\n          <h4>\n            <i class='fas fa-heart text-danger'></i>\n            <i class='fas fa-spade'></i>\n            <i class='fas fa-diamond text-danger'></i>\n            <i class='fas fa-club'></i>\n          </h4>\n        </div>\n      </div>\n      <div class='modal-body justify-content-center alert alert-success'>\n        <div class='input-group align-items-center mr-auto ml-auto mt-3' style='width:50%'>\n          <input type='number' bind:value={gameId} class='form-control' placeholder=\"Game # (optional)\">\n        </div>\n        <div class='input-group justify-content-center mt-3'>\n          <button class='btn btn-success btn-lg' on:click={startGame}>Start New Game</button>          \n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style type=\"text/scss\">.modal.bg-dark {\n  background: rgba(0, 0, 0, 0.5) !important;\n}\n\n/*# sourceMappingURL=NewGameModal.svelte.css.map */</style>\n",
    "<script>\n  export let id = undefined;\n  export let draggable = true;\n</script>\n\n\n{#if (id != undefined)}\n  <img src='/images/{id}.png' id={id} class='playing-card' class:draggable alt=\"{draggable}\">\n{/if}\n\n\n<style type=\"text/scss\">.playing-card {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: auto;\n  border-radius: 0.5vh;\n  box-shadow: 0px 0px 4px 1px rgba(0, 0, 0, 0.5);\n  z-index: 1000;\n}\n\n:global(.tableau) .playing-card:first-child {\n  margin-top: 0;\n}\n:global(.tableau) .playing-card {\n  margin-top: -80%;\n}\n\n/*# sourceMappingURL=card.svelte.css.map */</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  export let disableUndo = false;\n\n\n  const dispatch = createEventDispatcher();\n  function undo() {\n    dispatch('command', {command: 'undo'});\n  };\n\n  function newGame() {\n    dispatch('command', {command: 'newgame'});\n  };\n\n  function hint() {\n    dispatch('command', {command: 'hint'});\n  };\n\n  function settings() {\n    dispatch('command', {command: 'settings'});\n  };\n  function restart() {\n    dispatch('command', {command: 'restart'});\n  };\n\n</script>\n      \n\n<nav class=\"navbar fixed-bottom navbar-dark bg-dark p-0\" id='footer'>\n  <ul class=\"nav justify-content-around\" style='width:100%'>\n    <li class=\"nav-item\">\n      <a class=\"nav-link btn btn-link text-white\" class:disabled={disableUndo} on:click|preventDefault={undo} title=\"Undo last move\">\n        <i class=\"fas fa-undo\"></i>\n      </a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link btn btn-link text-white\" on:click|preventDefault={newGame} title='New Game'>\n        <i class=\"fas fa-power-off\"></i>\n      </a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link btn btn-link text-white\" on:click|preventDefault={hint} title=\"Get Hint (not implemented)\">\n        <i class=\"fas fa-lightbulb\"></i>\n      </a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link btn btn-link text-white\" on:click|preventDefault={restart} title=\"Restart this game\">\n        <i class=\"fas fa-fast-backward\"></i>\n      </a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link btn btn-link text-white\" on:click|preventDefault={settings} title=\"Settings (not implemented)\">\n        <i class=\"fas fa-cog\"></i>\n      </a>\n    </li>\n  </ul>\n</nav>\n\n<style type=\"text/scss\">#footer {\n  bottom: 20px !important;\n}\n\n/*# sourceMappingURL=footer.svelte.css.map */</style>",
    "<script>\n  import Card from './card.svelte';\n\n  export let cards = [];\n  export let index;  \n  export let type;\n  export let draggable = true;\n\n\n</script>\n\n<div class='cell {type}' data-index={index}>\n  <img src='/images/blank.png' class='blank'>\n  {#each cards as card, pos}\n    <Card id={card} draggable={draggable}/>\n  {/each}\n</div>\n\n\n<style type=\"text/scss\">.cell {\n  display: block;\n  position: relative;\n  width: 24%;\n  height: auto;\n  background: #004000;\n  border: 1px solid #161;\n  margin: 1px;\n}\n.cell .blank {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: auto;\n}\n\n:global(.cell) :global(.playing-card) {\n  position: absolute !important;\n  top: 0;\n  left: 0;\n}\n\n/*# sourceMappingURL=gamecell.svelte.css.map */</style>",
    "<script context=\"module\">\n  \n  let Game = {\n    ranks: ['A','2','3','4','5','6','7','8','9','T','J','Q','K'],\n    cardRank: function(id) {\n      return id[0];\n    },\n    cardColor: function(id){\n      return (id[1] == 'c' || id[1] == 's') ? 'black' : 'red';\n    },\n    cardSuit: function(id){\n      return id[1];\n    },\n    cardVal: function(id) {\n      return this.ranks.indexOf(id[0]);\n    }\n  }\n\n  /* recursive */\n  function validChild(card, cards) {\n    if (cards.length === 0) {\n      return true; // curr card is last one\n    } else {\n      let list = [...cards];\n      let child_card = list.shift();\n      let this_status = (Game.cardVal(card) === Game.cardVal(child_card) + 1) &&\n      (Game.cardColor(card) !== Game.cardColor(child_card));\n      return validChild(child_card, list) && (this_status);\n    }\n  }\n</script>\n\n<script>\n  import Card from './card.svelte';\n\n  export let cards = [];\n  export let index;\n</script>\n          \n\n<div class='tableau' data-index={index}>\n  {#each cards as card, pos}\n    <Card id={card} draggable={validChild(card, [...cards].slice(pos+1))}/>\n  {/each}\n</div>\n\n<style type=\"text/scss\">.tableau {\n  background: rgba(0, 0, 0, 0.2);\n  padding: 0;\n  margin: 0;\n  width: 12.5%;\n  height: 100%;\n  margin: 0 0.2%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n/*# sourceMappingURL=tableau.svelte.css.map */</style>"
  ],
  "names": [],
  "mappings": "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"
}